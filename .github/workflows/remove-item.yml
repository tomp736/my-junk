name: Remove Item

on:
  issues:
    types: [opened, labeled]

jobs:
  remove-item:
    if: contains(toJSON(github.event.issue.labels.*.name), 'remove-item') && !contains(toJSON(github.event.issue.labels.*.name), 'processed')
    runs-on: ubuntu-latest

    steps:
      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.GH_APP_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.GH_APP_AUTOMATION_APP_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}

      - name: Parse issue and validate item
        id: validate
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          result-encoding: string
          script: |
            const fs = require('fs');
            const path = require('path');

            const issueBody = context.payload.issue.body;

            // Parse the issue body to extract item-id
            const itemIdMatch = issueBody.match(/### Item ID\s+([^\s]+)/);

            if (!itemIdMatch) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '❌ **Error**: Could not find Item ID in the issue. Please make sure you filled out the form correctly.'
              });

              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['invalid']
              });

              return JSON.stringify({ valid: false });
            }

            const itemId = itemIdMatch[1].trim();
            console.log(`Item ID: ${itemId}`);

            // Check if item file exists
            const itemFilePath = `items/${itemId}.json`;

            if (!fs.existsSync(itemFilePath)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **Error**: Item file \`${itemFilePath}\` does not exist. Please check the Item ID and try again.`
              });

              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['invalid']
              });

              return JSON.stringify({ valid: false });
            }

            // Read item to get image paths
            const itemContent = fs.readFileSync(itemFilePath, 'utf8');
            const item = JSON.parse(itemContent);

            console.log(`Found item: ${item.id}`);
            console.log(`Images: ${JSON.stringify(item.images || [])}`);

            // Parse reason
            const reasonMatch = issueBody.match(/### Reason for Removal\s+([^\n]+)/);
            const reason = reasonMatch ? reasonMatch[1].trim() : 'Not specified';

            return JSON.stringify({
              valid: true,
              itemId: itemId,
              itemFilePath: itemFilePath,
              images: item.images || [],
              reason: reason,
              titleEn: item.title?.en || 'Unknown item'
            });

      - name: Parse validation result
        id: parse
        if: steps.validate.outcome == 'success'
        run: |
          RESULT='${{ steps.validate.outputs.result }}'
          echo "result=$RESULT" >> $GITHUB_OUTPUT

          VALID=$(echo "$RESULT" | jq -r '.valid')
          echo "valid=$VALID" >> $GITHUB_OUTPUT

          if [ "$VALID" = "true" ]; then
            echo "itemId=$(echo "$RESULT" | jq -r '.itemId')" >> $GITHUB_OUTPUT
            echo "itemFilePath=$(echo "$RESULT" | jq -r '.itemFilePath')" >> $GITHUB_OUTPUT
            echo "reason=$(echo "$RESULT" | jq -r '.reason')" >> $GITHUB_OUTPUT
            echo "titleEn=$(echo "$RESULT" | jq -r '.titleEn')" >> $GITHUB_OUTPUT

            # Extract images array
            echo "images<<EOF" >> $GITHUB_OUTPUT
            echo "$RESULT" | jq -r '.images[]' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Delete item and images
        id: delete-files
        if: steps.parse.outputs.valid == 'true'
        run: |
          ITEM_FILE="${{ steps.parse.outputs.itemFilePath }}"
          IMAGES="${{ steps.parse.outputs.images }}"

          # Delete item file
          if [ -f "$ITEM_FILE" ]; then
            git rm "$ITEM_FILE"
            echo "Deleted $ITEM_FILE"
          fi

          # Delete images
          if [ -n "$IMAGES" ]; then
            echo "$IMAGES" | while IFS= read -r image; do
              if [ -n "$image" ] && [ -f "$image" ]; then
                git rm "$image"
                echo "Deleted $image"
              fi
            done
          fi

          # Check if there are any changes
          if git diff --cached --quiet; then
            echo "No files to delete"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        id: create-pr
        if: steps.delete-files.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate-token.outputs.token }}
          commit-message: |
            Remove item: ${{ steps.parse.outputs.titleEn }}

            Item ID: ${{ steps.parse.outputs.itemId }}
            Reason: ${{ steps.parse.outputs.reason }}

            Closes #${{ github.event.issue.number }}
          branch: remove-item-${{ steps.parse.outputs.itemId }}
          delete-branch: true
          title: "Remove item: ${{ steps.parse.outputs.titleEn }}"
          body: |
            ## Remove Item

            This PR removes an item from the repository.

            **Item ID:** `${{ steps.parse.outputs.itemId }}`
            **Item Title:** ${{ steps.parse.outputs.titleEn }}
            **Reason:** ${{ steps.parse.outputs.reason }}

            **Files removed:**
            - `${{ steps.parse.outputs.itemFilePath }}`
            - Associated images

            ---

            Closes #${{ github.event.issue.number }}

            This PR was automatically created by the remove-item workflow.
          labels: remove-item

      - name: Comment on issue with PR link
        if: steps.create-pr.outputs.pull-request-number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `✅ **Remove Item PR Created**

              A pull request has been created to remove this item: #${{ steps.create-pr.outputs.pull-request-number }}

              The item and its images will be removed once the PR is reviewed and merged.

              This issue will automatically close when the PR is merged.`
            });

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['processed']
            });

      - name: Handle no changes
        if: steps.parse.outputs.valid == 'true' && steps.delete-files.outputs.has_changes == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '⚠️ **Warning**: Item file exists but no changes were detected. The item may have already been removed.'
            });
