name: Create Item PR from Issue

on:
  issues:
    types: [opened, edited]

jobs:
  create-item-pr:
    if: contains(toJSON(github.event.issue.labels.*.name), 'new-item')
    runs-on: ubuntu-latest

    steps:
      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.GH_APP_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.GH_APP_AUTOMATION_APP_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Parse issue and create JSON
        id: create-json
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Parse issue body to extract form data
            const issueBody = context.payload.issue.body;

            // Function to extract field value from issue body
            function extractField(body, fieldName) {
              const regex = new RegExp(`### ${fieldName}\\s*\\n\\s*(.+?)(?=\\n###|\\n\\n###|$)`, 's');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            }

            // Extract all fields
            const itemId = extractField(issueBody, 'Item ID');
            const titleEn = extractField(issueBody, 'Item Title \\(English\\)');
            const titlePl = extractField(issueBody, 'Item Title \\(Polish / Polski\\)');
            const descriptionEn = extractField(issueBody, 'Description \\(English\\)');
            const descriptionPl = extractField(issueBody, 'Description \\(Polish / Polski\\)');
            const price = parseFloat(extractField(issueBody, 'Price'));
            const currency = extractField(issueBody, 'Currency');
            const condition = extractField(issueBody, 'Condition');
            const category = extractField(issueBody, 'Category');
            const location = extractField(issueBody, 'Location');
            const imagesText = extractField(issueBody, 'Image URLs');
            const tagsText = extractField(issueBody, 'Tags');

            // Validate required fields
            if (!itemId || !titleEn || !titlePl || !descriptionEn || !descriptionPl || !price || !currency) {
              throw new Error('Missing required fields');
            }

            // Process images
            const images = imagesText
              .split('\n')
              .map(line => line.trim())
              .filter(line => line && (line.startsWith('http') || line.startsWith('images/')))
              .map(url => {
                // If it's a GitHub uploaded image, keep it as is
                // Otherwise, suggest moving to images/ folder
                if (url.startsWith('http') && !url.includes('github.com')) {
                  const filename = url.split('/').pop() || 'image.jpg';
                  return `images/${filename}`;
                }
                return url;
              });

            // Process tags
            const tags = tagsText
              .split(',')
              .map(tag => tag.trim())
              .filter(tag => tag);

            // Create item object
            const item = {
              id: itemId,
              title: {
                en: titleEn,
                pl: titlePl
              },
              description: {
                en: descriptionEn,
                pl: descriptionPl
              },
              price: price,
              currency: currency,
              condition: condition.toLowerCase(),
              category: category,
              status: "available",
              images: images.length > 0 ? images : [],
              datePosted: new Date().toISOString(),
              location: location,
              tags: tags
            };

            // Create items directory if it doesn't exist
            const itemsDir = 'items';
            if (!fs.existsSync(itemsDir)) {
              fs.mkdirSync(itemsDir, { recursive: true });
            }

            // Write JSON file
            const filename = `${itemsDir}/${itemId}.json`;
            fs.writeFileSync(filename, JSON.stringify(item, null, 2) + '\n');

            console.log(`Created item file: ${filename}`);

            // Return item data for use in next steps
            core.setOutput('filename', filename);
            core.setOutput('itemId', itemId);
            core.setOutput('titleEn', titleEn);
            core.setOutput('titlePl', titlePl);

            return {
              filename: filename,
              itemId: itemId,
              titleEn: titleEn,
              titlePl: titlePl
            };

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate-token.outputs.token }}
          commit-message: |
            Add item: ${{ steps.create-json.outputs.titleEn }}

            - Item ID: ${{ steps.create-json.outputs.itemId }}
            - English: ${{ steps.create-json.outputs.titleEn }}
            - Polish: ${{ steps.create-json.outputs.titlePl }}

            Closes #${{ github.event.issue.number }}
          branch: item-${{ steps.create-json.outputs.itemId }}-issue-${{ github.event.issue.number }}
          delete-branch: true
          title: "Add item: ${{ steps.create-json.outputs.titleEn }}"
          body: |
            ## New Item Submission / Nowy Przedmiot

            This PR adds a new item from issue #${{ github.event.issue.number }}

            **Item ID:** `${{ steps.create-json.outputs.itemId }}`
            **Title (EN):** ${{ steps.create-json.outputs.titleEn }}
            **Title (PL):** ${{ steps.create-json.outputs.titlePl }}

            ### Changes / Zmiany
            - Added `items/${{ steps.create-json.outputs.itemId }}.json`

            ### Review Checklist / Lista Kontrolna
            - [ ] Item information is accurate / Informacje o przedmiocie sƒÖ dok≈Çadne
            - [ ] Both English and Polish translations are correct / T≈Çumaczenia angielskie i polskie sƒÖ poprawne
            - [ ] Price and currency are correct / Cena i waluta sƒÖ poprawne
            - [ ] Images are properly referenced / Zdjƒôcia sƒÖ prawid≈Çowo odniesione

            Closes #${{ github.event.issue.number }}
          labels: new-item
          assignees: ${{ github.repository_owner }}
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>

      - name: Comment on issue
        if: steps.create-pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const prNumber = '${{ steps.create-pr.outputs.pull-request-number }}';
            const prUrl = '${{ steps.create-pr.outputs.pull-request-url }}';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚úÖ **Pull Request Created! / Utworzono Pull Request!**

            A pull request has been automatically created for your item submission.
            Pull request zosta≈Ç automatycznie utworzony dla Twojego zg≈Çoszenia.

            üîó **PR:** #${prNumber}
            üîó **URL:** ${prUrl}

            The item will be added to the repository once the PR is reviewed and merged.
            Przedmiot zostanie dodany do repozytorium po sprawdzeniu i zatwierdzeniu PR.

            Thank you for your submission! / Dziƒôkujemy za zg≈Çoszenie!`
            });

      - name: Add processed label
        if: steps.create-pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            // Add 'processed' label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['processed']
            });

      - name: Handle errors
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå **Error / B≈ÇƒÖd**

            There was an error processing this item. Please check that:
            WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania tego przedmiotu. Sprawd≈∫, czy:

            - All required fields are filled out correctly / Wszystkie wymagane pola sƒÖ wype≈Çnione poprawnie
            - The Item ID is unique / ID przedmiotu jest unikalne
            - Price is a valid number / Cena jest prawid≈ÇowƒÖ liczbƒÖ
            - All fields contain valid data / Wszystkie pola zawierajƒÖ prawid≈Çowe dane

            Please edit the issue and try again. / Edytuj zg≈Çoszenie i spr√≥buj ponownie.`
            });
