name: Create Listing Issue

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  create-listing-issue:
    if: github.event.pull_request.merged == true && contains(toJSON(github.event.pull_request.labels.*.name), 'new-item')
    runs-on: ubuntu-latest

    steps:
      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.GH_APP_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.GH_APP_AUTOMATION_APP_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}
          ref: main

      - name: Extract item details from PR
        id: extract-item
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          result-encoding: string
          script: |
            const fs = require('fs');
            const path = require('path');

            // Get the files changed in the PR
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            console.log(`Found ${files.length} files in PR`);
            files.forEach(f => {
              console.log(`  - ${f.filename} (status: ${f.status})`);
            });

            // Find the item JSON file - look for added or modified files in items/ directory
            const itemFile = files.find(f =>
              f.filename.startsWith('items/') &&
              f.filename.endsWith('.json') &&
              !f.filename.includes('example-item.json') &&
              (f.status === 'added' || f.status === 'modified')
            );

            if (!itemFile) {
              console.log('No new item file found in PR');
              console.log('Looking for: items/*.json with status "added" or "modified"');
              return JSON.stringify({ found: false });
            }

            console.log(`Found item file: ${itemFile.filename}`);

            // Read the item JSON
            const itemContent = fs.readFileSync(itemFile.filename, 'utf8');
            const item = JSON.parse(itemContent);

            console.log(`Extracted item: ${item.id}`);

            return JSON.stringify({
              found: true,
              itemId: item.id,
              titleEn: item.title.en,
              titlePl: item.title.pl,
              descriptionEn: item.description.en,
              descriptionPl: item.description.pl
            });

      - name: Parse extraction result
        id: parse-result
        if: steps.extract-item.outcome == 'success'
        run: |
          RESULT='${{ steps.extract-item.outputs.result }}'
          echo "result=$RESULT" >> $GITHUB_OUTPUT
          FOUND=$(echo $RESULT | jq -r '.found')
          echo "found=$FOUND" >> $GITHUB_OUTPUT
          if [ "$FOUND" = "true" ]; then
            echo "itemId=$(echo $RESULT | jq -r '.itemId')" >> $GITHUB_OUTPUT
            echo "titleEn=$(echo $RESULT | jq -r '.titleEn')" >> $GITHUB_OUTPUT
            echo "titlePl=$(echo $RESULT | jq -r '.titlePl')" >> $GITHUB_OUTPUT
            echo "descriptionEn=$(echo $RESULT | jq -r '.descriptionEn')" >> $GITHUB_OUTPUT
            echo "descriptionPl=$(echo $RESULT | jq -r '.descriptionPl')" >> $GITHUB_OUTPUT
          fi

      - name: Create listing issue
        if: steps.parse-result.outputs.found == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const itemId = '${{ steps.parse-result.outputs.itemId }}';
            const titleEn = '${{ steps.parse-result.outputs.titleEn }}';
            const titlePl = '${{ steps.parse-result.outputs.titlePl }}';
            const descriptionEn = '${{ steps.parse-result.outputs.descriptionEn }}';
            const descriptionPl = '${{ steps.parse-result.outputs.descriptionPl }}';

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Create listing for: ${titleEn}`,
              labels: ['listing-needed'],
              body: `## Create Listing / Utwórz Ogłoszenie

            Item has been added to the repository. Please create a listing on your preferred marketplace.

            Przedmiot został dodany do repozytorium. Proszę utworzyć ogłoszenie na preferowanej platformie sprzedaży.

            ### Item Details / Szczegóły Przedmiotu

            **Item ID / ID Przedmiotu:** \`${itemId}\`
            **Title (EN):** ${titleEn}
            **Title (PL):** ${titlePl}

            **Description (EN):**
            ${descriptionEn}

            **Description (PL):**
            ${descriptionPl}

            ### Instructions / Instrukcje

            1. Create a listing on your marketplace (OLX, Allegro, Facebook, etc.)
            2. **IMPORTANT:** Include this marker in the listing description: \`#!#${itemId}#!#\`
               - You can put it anywhere in the description (it can be hidden at the end)
               - This marker is used to verify the listing
            3. Once the listing is live, add a comment to this issue with the listing URL
            4. The GitHub Action will automatically verify the listing
            5. This issue will remain open until the validation PR is merged

            ---

            1. Utwórz ogłoszenie na platformie sprzedażowej (OLX, Allegro, Facebook, itp.)
            2. **WAŻNE:** Umieść ten znacznik w opisie ogłoszenia: \`#!#${itemId}#!#\`
               - Możesz go umieścić w dowolnym miejscu opisu (może być ukryty na końcu)
               - Ten znacznik służy do weryfikacji ogłoszenia
            3. Po opublikowaniu ogłoszenia, dodaj komentarz do tego zgłoszenia z URL ogłoszenia
            4. GitHub Action automatycznie zweryfikuje ogłoszenie
            5. To zgłoszenie pozostanie otwarte do momentu zatwierdzenia PR walidacyjnego

            ### Supported Marketplaces / Obsługiwane Platformy

            - OLX.pl
            - Allegro.pl
            - Facebook Marketplace
            - Other / Inne

            ### Comment Format / Format Komentarza

            Add a comment with this format:
            \`\`\`
            Listing URL: https://example.com/listing/12345
            \`\`\`

            Dodaj komentarz w tym formacie:
            \`\`\`
            Listing URL: https://example.com/listing/12345
            \`\`\`

            **Note:** Don't close the issue - it will close automatically after validation!
            **Uwaga:** Nie zamykaj zgłoszenia - zamknie się automatycznie po walidacji!
            `
            });

            console.log(`Created listing issue #${issue.data.number}`);
